require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Backend::ImagesController, type: :controller do
  before do
    sign_in admin
  end

  let(:admin) { create(:user, :admin) }
  let(:property) { create(:property) }

  # This should return the minimal set of attributes required to create a valid
  # Image As you add validations to Backend::Image, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { file: fixture_file_upload("test1.jpg"), property_id: property.id }
  }

  let(:invalid_attributes) {
    { remove_file: 1 }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Backend::ImagesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Backend::Image" do
        expect {
          xhr :post, :create, {:image => valid_attributes}, valid_session
        }.to change(Image, :count).by(1)
      end

      it "assigns a newly created backend_image as @image" do
        xhr :post, :create, {:image => valid_attributes}, valid_session
        expect(assigns(:image)).to be_a(Image)
        expect(assigns(:image)).to be_persisted
        expect(response).to be_success
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved backend_image as @image" do
        xhr :post, :create, {:image => invalid_attributes}, valid_session
        expect(assigns(:image)).to be_a_new(Image)
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested image" do
      image = Image.create! valid_attributes
      expect {
        xhr :delete, :destroy, {:id => image.to_param}, valid_session
      }.to change(Image, :count).by(-1)
      expect(response).to render_template(:destroy)
    end
  end
end
