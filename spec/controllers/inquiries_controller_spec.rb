require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe InquiriesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Inquiry. As you add validations to Inquiry, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "Philip", email: "hi@example.com", comment: "stuff", captcha_response: "5" }
  }

  let(:invalid_attributes) {
    { email: "ss", captcha_response: "5" }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InquiriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #new" do
    it "assigns a new inquiry as @inquiry" do
      VCR.use_cassette("captcha") do
        get :new, {property_id: "xxx"}, valid_session
        expect(assigns(:inquiry)).to be_a_new(Inquiry)
        expect(assigns(:inquiry).property_id).to eq("xxx")
        expect(assigns(:inquiry).captcha_question).to eq("What is the 3rd digit in 915428?")
        expect(session[:captcha_response]).to eq(["e4da3b7fbbce2345d7772b0674a318d5", "30056e1cab7a61d256fc8edd970d14f5"])
      end
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Inquiry" do
        expect {
          session[:captcha_response] = ["e4da3b7fbbce2345d7772b0674a318d5", "30056e1cab7a61d256fc8edd970d14f5"]
          post :create, {:inquiry => valid_attributes}, valid_session
        }.to change(Inquiry, :count).by(1)
        expect(assigns(:inquiry)).to be_a(Inquiry)
        expect(assigns(:inquiry)).to be_persisted
        expect(response).to render_template(:create)
      end
    end

    context "with invalid captcha" do
      it "redirects" do
        expect {
          post :create, {:inquiry => valid_attributes}, valid_session
        }.to change(Inquiry, :count).by(0)
        expect(flash[:error]).to eq("Are you sure that you are a human?")
        expect(response).to redirect_to(new_inquiry_path)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved inquiry as @inquiry" do
        session[:captcha_response] = ["e4da3b7fbbce2345d7772b0674a318d5", "30056e1cab7a61d256fc8edd970d14f5"]
        post :create, {:inquiry => invalid_attributes}, valid_session
        expect(flash[:error]).to eq("Cannot send message. Please try again.")
        expect(response).to redirect_to(new_inquiry_path)
      end
    end
  end
end
