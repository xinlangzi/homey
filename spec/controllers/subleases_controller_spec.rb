require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SubleasesController, type: :controller do
  before do
    sign_in admin
  end

  let(:admin) { create(:user, :admin) }


  # This should return the minimal set of attributes required to create a valid
  # Sublease. As you add validations to Sublease, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { title: "something" }
  }

  let(:invalid_attributes) {
    { content: "something", title: "" }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SubleasesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all subleases as @subleases" do
      sublease = Sublease.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:subleases)).to eq([sublease])
    end
  end

  # describe "GET #show" do
  #   it "assigns the requested sublease as @sublease" do
  #     sublease = Sublease.create! valid_attributes
  #     get :show, {:id => sublease.to_param}, valid_session
  #     expect(assigns(:sublease)).to eq(sublease)
  #   end
  # end

  describe "GET #new" do
    it "assigns a new sublease as @sublease" do
      get :new, {}, valid_session
      expect(assigns(:sublease)).to be_a_new(Sublease)
    end
  end

  # describe "GET #edit" do
  #   it "assigns the requested sublease as @sublease" do
  #     sublease = Sublease.create! valid_attributes
  #     get :edit, {:id => sublease.to_param}, valid_session
  #     expect(assigns(:sublease)).to eq(sublease)
  #   end
  # end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Sublease" do
        expect {
          post :create, {:sublease => valid_attributes}, valid_session
        }.to change(Sublease, :count).by(1)
      end

      it "assigns a newly created sublease as @sublease" do
        post :create, {:sublease => valid_attributes}, valid_session
        expect(assigns(:sublease)).to be_a(Sublease)
        expect(assigns(:sublease)).to be_persisted
      end

      it "redirects to the created sublease" do
        post :create, {:sublease => valid_attributes}, valid_session
        expect(response).to redirect_to(Sublease.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved sublease as @sublease" do
        post :create, {:sublease => invalid_attributes}, valid_session
        expect(assigns(:sublease)).to be_a_new(Sublease)
      end

      it "re-renders the 'new' template" do
        post :create, {:sublease => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       { title: "another" }
  #     }

  #     it "updates the requested sublease" do
  #       sublease = Sublease.create! valid_attributes
  #       put :update, {:id => sublease.to_param, :sublease => new_attributes}, valid_session
  #       sublease.reload
  #       expect(sublease.title).to eq("another")
  #     end

  #     it "assigns the requested sublease as @sublease" do
  #       sublease = Sublease.create! valid_attributes
  #       put :update, {:id => sublease.to_param, :sublease => valid_attributes}, valid_session
  #       expect(assigns(:sublease)).to eq(sublease)
  #     end

  #     it "redirects to the sublease" do
  #       sublease = Sublease.create! valid_attributes
  #       put :update, {:id => sublease.to_param, :sublease => valid_attributes}, valid_session
  #       expect(response).to redirect_to(sublease)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns the sublease as @sublease" do
  #       sublease = Sublease.create! valid_attributes
  #       put :update, {:id => sublease.to_param, :sublease => invalid_attributes}, valid_session
  #       expect(assigns(:sublease)).to eq(sublease)
  #     end

  #     it "re-renders the 'edit' template" do
  #       sublease = Sublease.create! valid_attributes
  #       put :update, {:id => sublease.to_param, :sublease => invalid_attributes}, valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE #destroy" do
  #   it "destroys the requested sublease" do
  #     sublease = Sublease.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => sublease.to_param}, valid_session
  #     }.to change(Sublease, :count).by(-1)
  #   end

  #   it "redirects to the subleases list" do
  #     sublease = Sublease.create! valid_attributes
  #     delete :destroy, {:id => sublease.to_param}, valid_session
  #     expect(response).to redirect_to(subleases_url)
  #   end
  # end

end
